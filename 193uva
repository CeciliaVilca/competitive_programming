#include <bits/stdc++.h>
using namespace std;
 
#define all(v)			((v).begin()), ((v).end())
#define sz(v)			((int)((v).size()))
#define clr(v, d)		memset(v, d, sizeof(v))
#define rep(i, v)		for(int i=0;i<sz(v);++i)
#define lp(i, n)		for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)	for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)	for(int i=(j);i>=(int)(n);--i)
typedef long long ll;
 
enum Color { white, black };
 
int n, m;
vector< vector<int> > adjList;
 
vector<int> bestBlacks, curBlacks;
vector<Color> curColor;
 
 
 
 
bool canBeBlack(int cur)
{	// Neighbors must be white
	for(auto nei : adjList[cur])
	{
		if (nei == cur || curColor[nei] == black)	// handle self loops
			return false;
	}
	return true;
}
 
 
 
 
 
 
// Maximum Independent Set is NP-complete
// 2^100 = TLE ... note very weak test cases, it will pass
void backtrack_1(int cur)
{
	if (cur == n)	// marked all?
	{
		if (bestBlacks.size() < curBlacks.size())
			bestBlacks = curBlacks;
		return ;
	}
	backtrack_1(cur+1);		// leave it white
 
	if (canBeBlack(cur))	// switch to black
	{	// do...rec...undo
		curColor[cur] = black;
		curBlacks.push_back(cur);
 
		backtrack_1(cur+1);
 
		curBlacks.pop_back();
		curColor[cur] = white;
	}
}
 
 

int main() {

	freopen("test.txt", "rt", stdin);

 
	int cases;
 
	cin>>cases;
 
	lp(cc, cases)
	{
		cin>>n>>m;
 
		adjList.clear();
		adjList.resize(n);
		curBlacks.clear();
		bestBlacks.clear();
		curColor = vector<Color>(n, white);
 
		lp(i, m)
		{
			int f, t;
 
			cin>>f>>t;
			--f, --t;
 
			adjList[f].push_back(t);
			adjList[t].push_back(f);
		}
		backtrack_1(0);	
 
		cout<<bestBlacks.size()<<"\n";
 
		string space = "";
		for(auto x : bestBlacks)
			cout<<space<<x+1, space = " ";
		cout<<"\n";
	}
 
	return 0;
}
